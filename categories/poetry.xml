<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dan Yeaw's Blog (Posts about Poetry)</title><link>https://dan.yeaw.me/</link><description></description><atom:link href="https://dan.yeaw.me/categories/poetry.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:dan@yeaw.me"&gt;Dan Yeaw&lt;/a&gt; </copyright><lastBuildDate>Thu, 03 Jan 2019 04:03:00 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to Rock Python Packaging with Poetry and Briefcase</title><link>https://dan.yeaw.me/posts/python-packaging-with-poetry-and-briefcase/</link><dc:creator>Dan Yeaw</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of modernizing &lt;a href="https://github.com/gaphor/gaphas"&gt;Gaphas&lt;/a&gt;, the
diagramming widget for Python, I took another look at what the best practices
are for packaging and releasing a new version of a Python library or
application. There are new configuration formats and tools to make packaging
and distributing your Python code much easier.&lt;/p&gt;
&lt;h2&gt;A Short Background on Packaging&lt;/h2&gt;
&lt;p&gt;There are two main use cases for packaging:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Packaging a Library - software that other programs will make use of.&lt;/li&gt;
&lt;li&gt;Packaging an Application - software that a user will make use of.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This may not be a completely accurate definition because software does not
always fit cleanly in to one of these bins, but these use cases will help to
keep focus on what exactly we are trying achieve with the packaging.&lt;/p&gt;
&lt;h4&gt;The Library&lt;/h4&gt;
&lt;p&gt;The goal for packaging a library is to place it on the Python Packaging Index
(PyPI), so other projects can &lt;code&gt;pip install&lt;/code&gt; it. In order to distribute a
library, the standard format is the Wheel. It allows for providing a built&lt;/p&gt;
&lt;p&gt;distribution of files and metadata so that pip only needs to extract files out
of the distribution and move them to the correct location on the target system
for the package to be installed. In other words, nothing needs to be built and
re-compiled.&lt;/p&gt;
&lt;p&gt;Previously if you wanted to
achieve this, it was common to have four configuration files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;setup.py - The setup script for building, distributing and installing
  modules using the Distutils.&lt;/li&gt;
&lt;li&gt;requirements.txt - Allow easy install of requirements using &lt;code&gt;pip install -r&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;setup.cfg - The setup configuration file&lt;/li&gt;
&lt;li&gt;MANIFEST.in - The manifest template, directs sdist how to generate
  a manifest&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;The Application&lt;/h4&gt;
&lt;p&gt;The goal for packaging an application is get it in the formats where you can
distribute it on the different platforms for easy installation by your users.
For Windows this is often an exe or msi. For macOS this is an app. For Linux
this is a deb, flatpak, appimage, or snap. There is a whole host of tools to
do this like:
&lt;a href="https://py2exe.org"&gt;py2exe&lt;/a&gt;, &lt;a href="https://py2app.readthedocs.io/"&gt;py2app&lt;/a&gt;,
&lt;a href="https://cx-freeze.readthedocs.io/"&gt;cx_Freeze&lt;/a&gt;,
&lt;a href="https://pyinstaller.readthedocs.io/"&gt;PyInstaller&lt;/a&gt;, and
&lt;a href="https://github.com/jaredks/rumps"&gt;rumps&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;pyproject.toml&lt;/h4&gt;
&lt;p&gt;On the packaging front, in May of 2016,
&lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518&lt;/a&gt; was created. The PEP does
a good job of describing all of the shortcoming of the setup script method to
specify build requirements. The PEP also specified a new configuration format
call pyproject.toml. If you aren't familiar with TOML, it is human-usable and is
more simple than YAML.&lt;/p&gt;
&lt;p&gt;The pyproject.toml replaced those four configuration files above using two main
sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[build-system]&lt;/code&gt; - The build-system table contains the minimum requirements
  for the build system to execute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[tool]&lt;/code&gt; - The tool table is where different tools can have users specify
  configuration data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;The Tools&lt;/h4&gt;
&lt;p&gt;Making use of this new configuration format, a tool called
&lt;a href="https://github.com/takluyver/flit"&gt;flit&lt;/a&gt; has been around since 2015 as a
simple way to put Python Libraries on PyPI.&lt;/p&gt;
&lt;p&gt;In 2017,
&lt;a href="https://github.com/pypa/pipenv"&gt;Pipenv&lt;/a&gt; was created to solve pain points about
managing virtualenvs and dependencies for Python Applications by using a new
Pipfile to manage dependencies. The other major enhancement was the use of a
lock file. While a Wheel is the important output for a Library, for an
Application, the lock file becomes the important thing created for the project.
The lock file contains the exact version of every dependency so that it can be
repeatably rebuilt.&lt;/p&gt;
&lt;p&gt;In 2018, a new project called &lt;a href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt;
combined some of the ideas from flit and Pipenv to create a new tool that aims
to further simplify and improve packaging. Like flit, Poetry makes use of the
pyproject.toml to manage configuration all in one place. Like Pipenv, Poetry
uses a lock file (poetry.lock) and will automatically create a virtualenv
if one does not already exist. It also has other advantages like exhaustive
dependency resolution that we will explore more thoroughly below.&lt;/p&gt;
&lt;p&gt;For Application distribution, I am going to focus on a single tool called
&lt;a href="https://briefcase.readthedocs.io/"&gt;Briefcase&lt;/a&gt; which along with the other set
of &lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt; tools and libraries allows for you to
distribute your program as a native application to Windows, Linux, macOS, iOS,
Android, and the web.&lt;/p&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;With the background information out of the way, lets work through how you can
create a new Python project from scratch, and then package and distribute it.&lt;/p&gt;
&lt;h4&gt;Initial Tool Installation&lt;/h4&gt;
&lt;p&gt;To do that, I am going to introduce one more tool (the last one I promise!)
called &lt;a href="https://cookiecutter.readthedocs.io/"&gt;cookiecutter&lt;/a&gt;. Cookiecutter
provides Python project templates, so that you can quickly get up to speed
creating a project that can be packaged and distributed without creating a
bunch of files and boilerplate manually.&lt;/p&gt;
&lt;p&gt;To install cookiecutter, depending on your setup and operating system, from a
virtualenv you can run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ pip install cookiecutter
&lt;/pre&gt;


&lt;p&gt;Next we are going to install Poetry. The recommended way is to run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py &lt;span class="p"&gt;|&lt;/span&gt; python
&lt;/pre&gt;


&lt;h4&gt;TestPyPI Account Sign-Up&lt;/h4&gt;
&lt;p&gt;As part of this tutorial we will be publishing packages. If you don't already
have an account, please register for an account on
&lt;a href="https://test.pypi.org/account/register/"&gt;TestPyPI&lt;/a&gt;. TestPyPI allows you to try
distribution tools and processes without affecting the real PyPI.&lt;/p&gt;
&lt;h4&gt;Create Your Project&lt;/h4&gt;
&lt;p&gt;To create the Python project, we are going to use the Briefcase template, so
run &lt;code&gt;cookiecutter&lt;/code&gt; on this template:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ cookiecutter https://github.com/pybee/briefcase-template
&lt;/pre&gt;


&lt;p&gt;Cookiecutter will ask you for information about the project like the name,
description, and software licence. Once this is finished, add any additional
code to your project, or just keep it as is for this demo.&lt;/p&gt;
&lt;p&gt;Change your directory to the app name you gave (I called mine dantestapp), and
initialize git:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; dantestapp
$ git init
$ git add .
&lt;/pre&gt;


&lt;h4&gt;Create a pyproject.toml Configuration&lt;/h4&gt;
&lt;p&gt;Poetry comes equipped to create a pyproject.toml file for your project, which
makes it easy to add it to an existing or new project. To initiliaze the
configuration run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ poetry init
&lt;/pre&gt;


&lt;p&gt;The command guides you through creating your pyproject.toml config. It
automatically pulls in the configuration values from the briefcase-template
that we created earlier so using the default values by hitting enter after the
first six questions will be fine. This is what it provided for an output:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Package name &lt;span class="o"&gt;[&lt;/span&gt;dantestapp&lt;span class="o"&gt;]&lt;/span&gt;: 
Version &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.0&lt;span class="o"&gt;]&lt;/span&gt;: 
Description &lt;span class="o"&gt;[]&lt;/span&gt;: 
Author &lt;span class="o"&gt;[&lt;/span&gt;Dan Yeaw &amp;lt;dan@yeaw.me&amp;gt;, n to skip&lt;span class="o"&gt;]&lt;/span&gt;: 
License &lt;span class="o"&gt;[]&lt;/span&gt;: MIT
Compatible Python versions &lt;span class="o"&gt;[&lt;/span&gt;^3.7&lt;span class="o"&gt;]&lt;/span&gt;: 
&lt;/pre&gt;


&lt;h5&gt;Define Dependencies&lt;/h5&gt;
&lt;p&gt;The configuration generator then asks for you to define your dependencies:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Would you like to define your dependencies &lt;span class="o"&gt;(&lt;/span&gt;require&lt;span class="o"&gt;)&lt;/span&gt; interactively? &lt;span class="o"&gt;(&lt;/span&gt;yes/no&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;yes&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Hit enter for yes.&lt;/p&gt;
&lt;p&gt;For the next prompt &lt;code&gt;Search for package:&lt;/code&gt; enter in briefcase. We are setting
briefcase as a dependency for our project to run.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Enter package &lt;span class="c1"&gt;# to add, or the complete package name if it is not listed: &lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; briefcase
 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; django-briefcase
&lt;/pre&gt;


&lt;p&gt;Type 0 to select the first option. and hit enter to select the latest version.
You now need to repeat this process to also add Toga as a dependency. Toga is
the native cross-platform GUI toolkit. Once you are done, hit enter again to
complete searching for other dependencies.&lt;/p&gt;
&lt;h5&gt;Define Development Dependencies&lt;/h5&gt;
&lt;p&gt;At the next prompt the config generator is now asking us to define our development
dependencies:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Would you like to define your dev dependencies &lt;span class="o"&gt;(&lt;/span&gt;require-dev&lt;span class="o"&gt;)&lt;/span&gt; interactively &lt;span class="o"&gt;(&lt;/span&gt;yes/no&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;yes&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Hit enter to select the default value which is yes.&lt;/p&gt;
&lt;p&gt;We are going to make &lt;a href="https://pytest.org"&gt;pytest&lt;/a&gt; a development dependency for
the project.&lt;/p&gt;
&lt;p&gt;At the prompt &lt;code&gt;Search for package:&lt;/code&gt; enter in pytest.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Found &lt;span class="m"&gt;100&lt;/span&gt; packages matching pytest

Enter package &lt;span class="c1"&gt;# to add, or the complete package name if it is not listed: &lt;/span&gt;
 &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; pytest
&lt;/pre&gt;


&lt;p&gt;You will get a long list of pytest packages. Type 0 to select the first option.
and hit enter to select the latest version. Then hit enter again to complete
searching for other development dependencies.&lt;/p&gt;
&lt;h5&gt;Complete the Configuration&lt;/h5&gt;
&lt;p&gt;The final step of the configuration generator summaries the configuration that it created.
Notice that first three sections are tool tables for Poetry, and the final one is
the build-system table.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;tool.poetry&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"dantestapp"&lt;/span&gt;
&lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;
&lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nv"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Dan Yeaw &amp;lt;dan@yeaw.me&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;license&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"MIT"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;tool.poetry.dependencies&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;python&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"^3.7"&lt;/span&gt;
&lt;span class="nv"&gt;briefcase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"^0.2.8"&lt;/span&gt;
&lt;span class="nv"&gt;toga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"^0.2.15"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;tool.poetry.dev-dependencies&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;pytest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"^4.0"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;build-system&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"poetry&amp;gt;=0.12"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
build-backend &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"poetry.masonry.api"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The dependencies use a "caret requirement", like &lt;code&gt;python = "^3.7"&lt;/code&gt;. This makes
use of &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. So in this example if Python 3.8
is released, then it will automatically update to this version. But, it won't
update to 4.0 automatically, since that is a major version change. If we put in
our configuration &lt;code&gt;"^3.7.2"&lt;/code&gt;, then it would automatically update to
3.7.3 which it is released, but not 3.8, since that is a new minor version.&lt;/p&gt;
&lt;p&gt;There are also "tilde requirements" that are more restrictive. So if you enter `python = "~3.7"
it will only allow update to the next patch level, like from 3.7.2 to 3.7.3. The combination
of caret and tilde requirements allows you to get updates to your dependencies when they are released, but
puts you in control to ensure that incompatible changes won't break your app. Nice!&lt;/p&gt;
&lt;p&gt;The final prompt asks: &lt;code&gt;Do you confim generation? (yes/no) [yes]&lt;/code&gt;. Go ahead 
and hit enter to confirm. Congrats, you have generated a pyproject.toml
configuration!&lt;/p&gt;
&lt;h4&gt;Install Dependencies&lt;/h4&gt;
&lt;p&gt;OK, the hard work is over, we have created our project and finished the configuration.
Now it is time to see how Poetry and Briefcase really shines.&lt;/p&gt;
&lt;p&gt;To install the dependencies that you defined in the pyproject.toml, just run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ poetry install
&lt;/pre&gt;


&lt;p&gt;Poetry includes an exhaustive dependency resolver, so it will now resolve all of the
dependencies it needs to install Briefcase, Toga, and pytest. It will also create
a &lt;code&gt;poetry.lock&lt;/code&gt; file which ensures that anyone using your program would get the
exact same set of dependencies that you used and tested with.&lt;/p&gt;
&lt;p&gt;Notice that we also did not create or specify a virtual environment. Poetry automatically
creates one prior to installing packages, if one isn't already activated. If you
would like to see which packages are installed and which virtual environment
Poetry is using you can run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ poetry show -v
or
$ poetry config --list
&lt;/pre&gt;


&lt;h4&gt;Bundle and Run your Application for Platform Distribution&lt;/h4&gt;
&lt;p&gt;For a Python Application, you want to bundle the application and all of its
dependencies into a single package so that it can easily be installed on a users
platform without the user manually install Python and other modules.&lt;/p&gt;
&lt;p&gt;Briefcase allows you to package and run your app using your platform:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Windows&lt;span class="o"&gt;)&lt;/span&gt; $ poetry run python setup.py windows -s
&lt;span class="o"&gt;(&lt;/span&gt;macOS&lt;span class="o"&gt;)&lt;/span&gt;   $ poetry run python setup.py macos -s
&lt;span class="o"&gt;(&lt;/span&gt;Linux&lt;span class="o"&gt;)&lt;/span&gt;   $ poetry run python setup.py linux -s
&lt;/pre&gt;


&lt;p&gt;Your app will launch, will just be a blank window at this point.&lt;/p&gt;
&lt;p&gt;Also notice that it creates a folder with the platform name that you used
above. Inside this folder, Briefcase has packaged your app for distribution on
your platform. Briefcase also has distribution options for android, ios, and
django.&lt;/p&gt;
&lt;h4&gt;Build your Library for Distribution on PyPI&lt;/h4&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ poetry build

Building dantestapp &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.0&lt;span class="o"&gt;)&lt;/span&gt;
 - Building sdist
 - Built dantestapp-0.1.0.tar.gz

 - Building wheel
 - Built dantestapp-0.1.0-py3-none-any.whl
&lt;/pre&gt;


&lt;p&gt;The source distribution (sdist) and wheel are now in a new &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt;
&lt;h4&gt;Publish your Library to PyPI&lt;/h4&gt;
&lt;p&gt;First we are going to add the TestPyPI repository to Poetry, so that it knows
where to publish to. The default location is to the real PyPI.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ poetry config repositories.test-pypi https://test.pypi.org/legacy/
&lt;/pre&gt;


&lt;p&gt;Now simply run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ poetry publish -r test-pypi
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;-r&lt;/code&gt; argument tells Poetry to use the repository that we configured. Poetry
then will ask for your username and password. Congrats! Your package is now
available to be viewed at https://test.pypi.org/project/your-project-name/ and
can be pip installed with &lt;code&gt;pip install -i https://test.pypi.org/simple/
your-project-name&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>BeeWare</category><category>Briefcase</category><category>packaging</category><category>Poetry</category><category>Python</category><guid>https://dan.yeaw.me/posts/python-packaging-with-poetry-and-briefcase/</guid><pubDate>Thu, 03 Jan 2019 04:01:00 GMT</pubDate></item></channel></rss>